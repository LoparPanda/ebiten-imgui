package renderer

import (
	"strings"

	"github.com/hajimehoshi/ebiten"
	"github.com/hajimehoshi/ebiten/inpututil"
	"github.com/inkyblackness/imgui-go/v2"
)

var keys = map[int]int{
	imgui.KeyTab:        int(ebiten.KeyTab),
	imgui.KeyLeftArrow:  int(ebiten.KeyLeft),
	imgui.KeyRightArrow: int(ebiten.KeyRight),
	imgui.KeyUpArrow:    int(ebiten.KeyUp),
	imgui.KeyDownArrow:  int(ebiten.KeyDown),
	imgui.KeyPageUp:     int(ebiten.KeyPageUp),
	imgui.KeyPageDown:   int(ebiten.KeyPageDown),
	imgui.KeyHome:       int(ebiten.KeyHome),
	imgui.KeyEnd:        int(ebiten.KeyEnd),
	imgui.KeyInsert:     int(ebiten.KeyInsert),
	imgui.KeyDelete:     int(ebiten.KeyDelete),
	imgui.KeyBackspace:  int(ebiten.KeyBackspace),
	imgui.KeySpace:      int(ebiten.KeySpace),
	imgui.KeyEnter:      int(ebiten.KeyEnter),
	imgui.KeyEscape:     int(ebiten.KeyEscape),
	imgui.KeyA:          int(ebiten.KeyA),
	imgui.KeyC:          int(ebiten.KeyC),
	imgui.KeyV:          int(ebiten.KeyV),
	imgui.KeyX:          int(ebiten.KeyX),
	imgui.KeyY:          int(ebiten.KeyY),
	imgui.KeyZ:          int(ebiten.KeyZ),
}

var keyList = []ebiten.Key{
	ebiten.Key0,
	ebiten.Key1,
	ebiten.Key2,
	ebiten.Key3,
	ebiten.Key4,
	ebiten.Key5,
	ebiten.Key6,
	ebiten.Key7,
	ebiten.Key8,
	ebiten.Key9,
	ebiten.KeyA,
	ebiten.KeyB,
	ebiten.KeyC,
	ebiten.KeyD,
	ebiten.KeyE,
	ebiten.KeyF,
	ebiten.KeyG,
	ebiten.KeyH,
	ebiten.KeyI,
	ebiten.KeyJ,
	ebiten.KeyK,
	ebiten.KeyL,
	ebiten.KeyM,
	ebiten.KeyN,
	ebiten.KeyO,
	ebiten.KeyP,
	ebiten.KeyQ,
	ebiten.KeyR,
	ebiten.KeyS,
	ebiten.KeyT,
	ebiten.KeyU,
	ebiten.KeyV,
	ebiten.KeyW,
	ebiten.KeyX,
	ebiten.KeyY,
	ebiten.KeyZ,
	ebiten.KeyApostrophe,
	ebiten.KeyBackslash,
	ebiten.KeyBackspace,
	ebiten.KeyCapsLock,
	ebiten.KeyComma,
	ebiten.KeyDelete,
	ebiten.KeyDown,
	ebiten.KeyEnd,
	ebiten.KeyEnter,
	ebiten.KeyEqual,
	ebiten.KeyEscape,
	ebiten.KeyF1,
	ebiten.KeyF2,
	ebiten.KeyF3,
	ebiten.KeyF4,
	ebiten.KeyF5,
	ebiten.KeyF6,
	ebiten.KeyF7,
	ebiten.KeyF8,
	ebiten.KeyF9,
	ebiten.KeyF10,
	ebiten.KeyF11,
	ebiten.KeyF12,
	ebiten.KeyGraveAccent,
	ebiten.KeyHome,
	ebiten.KeyInsert,
	ebiten.KeyKP0,
	ebiten.KeyKP1,
	ebiten.KeyKP2,
	ebiten.KeyKP3,
	ebiten.KeyKP4,
	ebiten.KeyKP5,
	ebiten.KeyKP6,
	ebiten.KeyKP7,
	ebiten.KeyKP8,
	ebiten.KeyKP9,
	ebiten.KeyKPAdd,
	ebiten.KeyKPDecimal,
	ebiten.KeyKPDivide,
	ebiten.KeyKPEnter,
	ebiten.KeyKPEqual,
	ebiten.KeyKPMultiply,
	ebiten.KeyKPSubtract,
	ebiten.KeyLeft,
	ebiten.KeyLeftBracket,
	ebiten.KeyMenu,
	ebiten.KeyMinus,
	ebiten.KeyNumLock,
	ebiten.KeyPageDown,
	ebiten.KeyPageUp,
	ebiten.KeyPause,
	ebiten.KeyPeriod,
	ebiten.KeyPrintScreen,
	ebiten.KeyRight,
	ebiten.KeyRightBracket,
	ebiten.KeyScrollLock,
	ebiten.KeySemicolon,
	ebiten.KeySlash,
	ebiten.KeySpace,
	ebiten.KeyTab,
	ebiten.KeyUp,
	ebiten.KeyAlt,
	ebiten.KeyControl,
	ebiten.KeyShift,
}

var textKeyList = map[ebiten.Key][2]rune{
	ebiten.Key0:            {'0', ')'},
	ebiten.Key1:            {'1', '!'},
	ebiten.Key2:            {'2', '@'},
	ebiten.Key3:            {'3', '#'},
	ebiten.Key4:            {'4', '$'},
	ebiten.Key5:            {'5', '%'},
	ebiten.Key6:            {'6', '^'},
	ebiten.Key7:            {'7', '&'},
	ebiten.Key8:            {'8', '*'},
	ebiten.Key9:            {'9', '('},
	ebiten.KeyA:            {'a', 'A'},
	ebiten.KeyB:            {'b', 'B'},
	ebiten.KeyC:            {'c', 'C'},
	ebiten.KeyD:            {'d', 'D'},
	ebiten.KeyE:            {'e', 'E'},
	ebiten.KeyF:            {'f', 'F'},
	ebiten.KeyG:            {'g', 'G'},
	ebiten.KeyH:            {'h', 'H'},
	ebiten.KeyI:            {'i', 'I'},
	ebiten.KeyJ:            {'j', 'J'},
	ebiten.KeyK:            {'k', 'K'},
	ebiten.KeyL:            {'l', 'L'},
	ebiten.KeyM:            {'m', 'M'},
	ebiten.KeyN:            {'n', 'N'},
	ebiten.KeyO:            {'o', 'O'},
	ebiten.KeyP:            {'p', 'P'},
	ebiten.KeyQ:            {'q', 'Q'},
	ebiten.KeyR:            {'r', 'R'},
	ebiten.KeyS:            {'s', 'S'},
	ebiten.KeyT:            {'t', 'T'},
	ebiten.KeyU:            {'u', 'U'},
	ebiten.KeyV:            {'v', 'V'},
	ebiten.KeyW:            {'w', 'W'},
	ebiten.KeyX:            {'x', 'X'},
	ebiten.KeyY:            {'y', 'Y'},
	ebiten.KeyZ:            {'z', 'Z'},
	ebiten.KeyApostrophe:   {'\'', '"'},
	ebiten.KeyBackslash:    {'\\', '|'},
	ebiten.KeyComma:        {',', '<'},
	ebiten.KeyEqual:        {'=', '+'},
	ebiten.KeyGraveAccent:  {'`', '~'},
	ebiten.KeyKP0:          {'0', '0'},
	ebiten.KeyKP1:          {'1', '1'},
	ebiten.KeyKP2:          {'2', '2'},
	ebiten.KeyKP3:          {'3', '3'},
	ebiten.KeyKP4:          {'4', '4'},
	ebiten.KeyKP5:          {'5', '5'},
	ebiten.KeyKP6:          {'6', '6'},
	ebiten.KeyKP7:          {'7', '7'},
	ebiten.KeyKP8:          {'8', '8'},
	ebiten.KeyKP9:          {'9', '9'},
	ebiten.KeyKPAdd:        {'+', '+'},
	ebiten.KeyKPDecimal:    {'.', '.'},
	ebiten.KeyKPDivide:     {'/', '/'},
	ebiten.KeyKPEqual:      {'=', '='},
	ebiten.KeyKPMultiply:   {'*', '*'},
	ebiten.KeyKPSubtract:   {'-', '-'},
	ebiten.KeyLeftBracket:  {'[', '{'},
	ebiten.KeyMinus:        {'-', '_'},
	ebiten.KeyPeriod:       {'.', '>'},
	ebiten.KeyRightBracket: {']', '}'},
	ebiten.KeySemicolon:    {';', ':'},
	ebiten.KeySlash:        {'/', '?'},
	ebiten.KeySpace:        {' ', ' '},
}

var textKeyListCaps = map[ebiten.Key]bool{
	ebiten.KeyA: true,
	ebiten.KeyB: true,
	ebiten.KeyC: true,
	ebiten.KeyD: true,
	ebiten.KeyE: true,
	ebiten.KeyF: true,
	ebiten.KeyG: true,
	ebiten.KeyH: true,
	ebiten.KeyI: true,
	ebiten.KeyJ: true,
	ebiten.KeyK: true,
	ebiten.KeyL: true,
	ebiten.KeyM: true,
	ebiten.KeyN: true,
	ebiten.KeyO: true,
	ebiten.KeyP: true,
	ebiten.KeyQ: true,
	ebiten.KeyR: true,
	ebiten.KeyS: true,
	ebiten.KeyT: true,
	ebiten.KeyU: true,
	ebiten.KeyV: true,
	ebiten.KeyW: true,
	ebiten.KeyX: true,
	ebiten.KeyY: true,
	ebiten.KeyZ: true,
}

func sendInput(io *imgui.IO) {
	// platform.imguiIO.AddInputCharacters(string(inputEvent.Text[:]))
	var sb *strings.Builder
	//TODO: caps lock (?)
	shift := ebiten.IsKeyPressed(ebiten.KeyShift)
	si := 0
	if shift {
		si = 1
	}
	for ki, kv := range textKeyList {
		if inpututil.IsKeyJustPressed(ki) {
			if sb == nil {
				sb = new(strings.Builder)
			}
			sb.WriteRune(kv[si])
		}
	}
	if sb != nil {
		io.AddInputCharacters(sb.String())
	}
	for _, iv := range keys {
		if inpututil.IsKeyJustPressed(ebiten.Key(iv)) {
			io.KeyPress(iv)
		}
		if inpututil.IsKeyJustReleased(ebiten.Key(iv)) {
			io.KeyRelease(iv)
		}
	}
}
